/**
 *
 *  Data.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Data.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::Mnemosyne;

const std::string Data::Cols::_id = "id";
const std::string Data::Cols::_type = "type";
const std::string Data::Cols::_name = "name";
const std::string Data::Cols::_tags = "tags";
const std::string Data::Cols::_content = "content";
const std::string Data::Cols::_collection = "collection";
const std::string Data::Cols::_uploader = "uploader";
const std::string Data::Cols::_upload_time = "upload_time";
const std::string Data::Cols::_visibility = "visibility";
const std::string Data::Cols::_extra = "extra";
const std::string Data::primaryKeyName = "id";
const bool Data::hasPrimaryKey = true;
const std::string Data::tableName = "data";

const std::vector<typename Data::MetaData> Data::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"type","std::string","text",0,0,0,1},
{"name","std::string","text",0,0,0,0},
{"tags","std::string","text",0,0,0,0},
{"content","std::string","text",0,0,0,0},
{"collection","int64_t","bigint",8,0,0,1},
{"uploader","int64_t","bigint",8,0,0,1},
{"upload_time","::trantor::Date","timestamp without time zone",0,0,0,1},
{"visibility","int32_t","integer",4,0,0,1},
{"extra","std::string","text",0,0,0,0}
};
const std::string &Data::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Data::Data(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(r["tags"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["collection"].isNull())
        {
            collection_=std::make_shared<int64_t>(r["collection"].as<int64_t>());
        }
        if(!r["uploader"].isNull())
        {
            uploader_=std::make_shared<int64_t>(r["uploader"].as<int64_t>());
        }
        if(!r["upload_time"].isNull())
        {
            auto timeStr = r["upload_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["visibility"].isNull())
        {
            visibility_=std::make_shared<int32_t>(r["visibility"].as<int32_t>());
        }
        if(!r["extra"].isNull())
        {
            extra_=std::make_shared<std::string>(r["extra"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 10 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            tags_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            collection_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            uploader_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            visibility_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            extra_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Data::Data(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tags_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            collection_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            uploader_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            visibility_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            extra_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
}

Data::Data(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("tags"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(pJson["tags"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("collection"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["collection"].isNull())
        {
            collection_=std::make_shared<int64_t>((int64_t)pJson["collection"].asInt64());
        }
    }
    if(pJson.isMember("uploader"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["uploader"].isNull())
        {
            uploader_=std::make_shared<int64_t>((int64_t)pJson["uploader"].asInt64());
        }
    }
    if(pJson.isMember("upload_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["upload_time"].isNull())
        {
            auto timeStr = pJson["upload_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("visibility"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["visibility"].isNull())
        {
            visibility_=std::make_shared<int32_t>((int32_t)pJson["visibility"].asInt64());
        }
    }
    if(pJson.isMember("extra"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["extra"].isNull())
        {
            extra_=std::make_shared<std::string>(pJson["extra"].asString());
        }
    }
}

void Data::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tags_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            collection_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            uploader_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            visibility_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            extra_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
}

void Data::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("tags"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(pJson["tags"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("collection"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["collection"].isNull())
        {
            collection_=std::make_shared<int64_t>((int64_t)pJson["collection"].asInt64());
        }
    }
    if(pJson.isMember("uploader"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["uploader"].isNull())
        {
            uploader_=std::make_shared<int64_t>((int64_t)pJson["uploader"].asInt64());
        }
    }
    if(pJson.isMember("upload_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["upload_time"].isNull())
        {
            auto timeStr = pJson["upload_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                uploadTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("visibility"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["visibility"].isNull())
        {
            visibility_=std::make_shared<int32_t>((int32_t)pJson["visibility"].asInt64());
        }
    }
    if(pJson.isMember("extra"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["extra"].isNull())
        {
            extra_=std::make_shared<std::string>(pJson["extra"].asString());
        }
    }
}

const int64_t &Data::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Data::getId() const noexcept
{
    return id_;
}
void Data::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Data::PrimaryKeyType & Data::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Data::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getType() const noexcept
{
    return type_;
}
void Data::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[1] = true;
}
void Data::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[1] = true;
}

const std::string &Data::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getName() const noexcept
{
    return name_;
}
void Data::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[2] = true;
}
void Data::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[2] = true;
}
void Data::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Data::getValueOfTags() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tags_)
        return *tags_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getTags() const noexcept
{
    return tags_;
}
void Data::setTags(const std::string &pTags) noexcept
{
    tags_ = std::make_shared<std::string>(pTags);
    dirtyFlag_[3] = true;
}
void Data::setTags(std::string &&pTags) noexcept
{
    tags_ = std::make_shared<std::string>(std::move(pTags));
    dirtyFlag_[3] = true;
}
void Data::setTagsToNull() noexcept
{
    tags_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Data::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getContent() const noexcept
{
    return content_;
}
void Data::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[4] = true;
}
void Data::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[4] = true;
}
void Data::setContentToNull() noexcept
{
    content_.reset();
    dirtyFlag_[4] = true;
}

const int64_t &Data::getValueOfCollection() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(collection_)
        return *collection_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Data::getCollection() const noexcept
{
    return collection_;
}
void Data::setCollection(const int64_t &pCollection) noexcept
{
    collection_ = std::make_shared<int64_t>(pCollection);
    dirtyFlag_[5] = true;
}

const int64_t &Data::getValueOfUploader() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(uploader_)
        return *uploader_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Data::getUploader() const noexcept
{
    return uploader_;
}
void Data::setUploader(const int64_t &pUploader) noexcept
{
    uploader_ = std::make_shared<int64_t>(pUploader);
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Data::getValueOfUploadTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(uploadTime_)
        return *uploadTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Data::getUploadTime() const noexcept
{
    return uploadTime_;
}
void Data::setUploadTime(const ::trantor::Date &pUploadTime) noexcept
{
    uploadTime_ = std::make_shared<::trantor::Date>(pUploadTime);
    dirtyFlag_[7] = true;
}

const int32_t &Data::getValueOfVisibility() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(visibility_)
        return *visibility_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Data::getVisibility() const noexcept
{
    return visibility_;
}
void Data::setVisibility(const int32_t &pVisibility) noexcept
{
    visibility_ = std::make_shared<int32_t>(pVisibility);
    dirtyFlag_[8] = true;
}

const std::string &Data::getValueOfExtra() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extra_)
        return *extra_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getExtra() const noexcept
{
    return extra_;
}
void Data::setExtra(const std::string &pExtra) noexcept
{
    extra_ = std::make_shared<std::string>(pExtra);
    dirtyFlag_[9] = true;
}
void Data::setExtra(std::string &&pExtra) noexcept
{
    extra_ = std::make_shared<std::string>(std::move(pExtra));
    dirtyFlag_[9] = true;
}
void Data::setExtraToNull() noexcept
{
    extra_.reset();
    dirtyFlag_[9] = true;
}

void Data::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Data::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "type",
        "name",
        "tags",
        "content",
        "collection",
        "uploader",
        "upload_time",
        "visibility",
        "extra"
    };
    return inCols;
}

void Data::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTags())
        {
            binder << getValueOfTags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCollection())
        {
            binder << getValueOfCollection();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUploader())
        {
            binder << getValueOfUploader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUploadTime())
        {
            binder << getValueOfUploadTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVisibility())
        {
            binder << getValueOfVisibility();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExtra())
        {
            binder << getValueOfExtra();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Data::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    return ret;
}

void Data::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTags())
        {
            binder << getValueOfTags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCollection())
        {
            binder << getValueOfCollection();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUploader())
        {
            binder << getValueOfUploader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUploadTime())
        {
            binder << getValueOfUploadTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVisibility())
        {
            binder << getValueOfVisibility();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExtra())
        {
            binder << getValueOfExtra();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Data::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTags())
    {
        ret["tags"]=getValueOfTags();
    }
    else
    {
        ret["tags"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getCollection())
    {
        ret["collection"]=(Json::Int64)getValueOfCollection();
    }
    else
    {
        ret["collection"]=Json::Value();
    }
    if(getUploader())
    {
        ret["uploader"]=(Json::Int64)getValueOfUploader();
    }
    else
    {
        ret["uploader"]=Json::Value();
    }
    if(getUploadTime())
    {
        ret["upload_time"]=getUploadTime()->toDbStringLocal();
    }
    else
    {
        ret["upload_time"]=Json::Value();
    }
    if(getVisibility())
    {
        ret["visibility"]=getValueOfVisibility();
    }
    else
    {
        ret["visibility"]=Json::Value();
    }
    if(getExtra())
    {
        ret["extra"]=getValueOfExtra();
    }
    else
    {
        ret["extra"]=Json::Value();
    }
    return ret;
}

Json::Value Data::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 10)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[2]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTags())
            {
                ret[pMasqueradingVector[3]]=getValueOfTags();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[4]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCollection())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfCollection();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUploader())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfUploader();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUploadTime())
            {
                ret[pMasqueradingVector[7]]=getUploadTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getVisibility())
            {
                ret[pMasqueradingVector[8]]=getValueOfVisibility();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getExtra())
            {
                ret[pMasqueradingVector[9]]=getValueOfExtra();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTags())
    {
        ret["tags"]=getValueOfTags();
    }
    else
    {
        ret["tags"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getCollection())
    {
        ret["collection"]=(Json::Int64)getValueOfCollection();
    }
    else
    {
        ret["collection"]=Json::Value();
    }
    if(getUploader())
    {
        ret["uploader"]=(Json::Int64)getValueOfUploader();
    }
    else
    {
        ret["uploader"]=Json::Value();
    }
    if(getUploadTime())
    {
        ret["upload_time"]=getUploadTime()->toDbStringLocal();
    }
    else
    {
        ret["upload_time"]=Json::Value();
    }
    if(getVisibility())
    {
        ret["visibility"]=getValueOfVisibility();
    }
    else
    {
        ret["visibility"]=Json::Value();
    }
    if(getExtra())
    {
        ret["extra"]=getValueOfExtra();
    }
    else
    {
        ret["extra"]=Json::Value();
    }
    return ret;
}

bool Data::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("tags"))
    {
        if(!validJsonOfField(3, "tags", pJson["tags"], err, true))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(4, "content", pJson["content"], err, true))
            return false;
    }
    if(pJson.isMember("collection"))
    {
        if(!validJsonOfField(5, "collection", pJson["collection"], err, true))
            return false;
    }
    if(pJson.isMember("uploader"))
    {
        if(!validJsonOfField(6, "uploader", pJson["uploader"], err, true))
            return false;
    }
    if(pJson.isMember("upload_time"))
    {
        if(!validJsonOfField(7, "upload_time", pJson["upload_time"], err, true))
            return false;
    }
    if(pJson.isMember("visibility"))
    {
        if(!validJsonOfField(8, "visibility", pJson["visibility"], err, true))
            return false;
    }
    if(pJson.isMember("extra"))
    {
        if(!validJsonOfField(9, "extra", pJson["extra"], err, true))
            return false;
    }
    return true;
}
bool Data::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Data::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("tags"))
    {
        if(!validJsonOfField(3, "tags", pJson["tags"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(4, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("collection"))
    {
        if(!validJsonOfField(5, "collection", pJson["collection"], err, false))
            return false;
    }
    if(pJson.isMember("uploader"))
    {
        if(!validJsonOfField(6, "uploader", pJson["uploader"], err, false))
            return false;
    }
    if(pJson.isMember("upload_time"))
    {
        if(!validJsonOfField(7, "upload_time", pJson["upload_time"], err, false))
            return false;
    }
    if(pJson.isMember("visibility"))
    {
        if(!validJsonOfField(8, "visibility", pJson["visibility"], err, false))
            return false;
    }
    if(pJson.isMember("extra"))
    {
        if(!validJsonOfField(9, "extra", pJson["extra"], err, false))
            return false;
    }
    return true;
}
bool Data::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Data::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
