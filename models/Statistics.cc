/**
 *
 *  Statistics.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Statistics.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::Mnemosyne;

const std::string Statistics::Cols::_id = "id";
const std::string Statistics::Cols::_audios = "audios";
const std::string Statistics::Cols::_documents = "documents";
const std::string Statistics::Cols::_ebooks = "ebooks";
const std::string Statistics::Cols::_images = "images";
const std::string Statistics::Cols::_models = "models";
const std::string Statistics::Cols::_videos = "videos";
const std::string Statistics::primaryKeyName = "id";
const bool Statistics::hasPrimaryKey = true;
const std::string Statistics::tableName = "statistics";

const std::vector<typename Statistics::MetaData> Statistics::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"audios","int32_t","integer",4,0,0,1},
{"documents","int32_t","integer",4,0,0,1},
{"ebooks","int32_t","integer",4,0,0,1},
{"images","int32_t","integer",4,0,0,1},
{"models","int32_t","integer",4,0,0,1},
{"videos","int32_t","integer",4,0,0,1}
};
const std::string &Statistics::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Statistics::Statistics(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["audios"].isNull())
        {
            audios_=std::make_shared<int32_t>(r["audios"].as<int32_t>());
        }
        if(!r["documents"].isNull())
        {
            documents_=std::make_shared<int32_t>(r["documents"].as<int32_t>());
        }
        if(!r["ebooks"].isNull())
        {
            ebooks_=std::make_shared<int32_t>(r["ebooks"].as<int32_t>());
        }
        if(!r["images"].isNull())
        {
            images_=std::make_shared<int32_t>(r["images"].as<int32_t>());
        }
        if(!r["models"].isNull())
        {
            models_=std::make_shared<int32_t>(r["models"].as<int32_t>());
        }
        if(!r["videos"].isNull())
        {
            videos_=std::make_shared<int32_t>(r["videos"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            audios_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            documents_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            ebooks_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            images_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            models_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            videos_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Statistics::Statistics(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            audios_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            documents_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ebooks_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            images_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            models_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            videos_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

Statistics::Statistics(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("audios"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["audios"].isNull())
        {
            audios_=std::make_shared<int32_t>((int32_t)pJson["audios"].asInt64());
        }
    }
    if(pJson.isMember("documents"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["documents"].isNull())
        {
            documents_=std::make_shared<int32_t>((int32_t)pJson["documents"].asInt64());
        }
    }
    if(pJson.isMember("ebooks"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["ebooks"].isNull())
        {
            ebooks_=std::make_shared<int32_t>((int32_t)pJson["ebooks"].asInt64());
        }
    }
    if(pJson.isMember("images"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["images"].isNull())
        {
            images_=std::make_shared<int32_t>((int32_t)pJson["images"].asInt64());
        }
    }
    if(pJson.isMember("models"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["models"].isNull())
        {
            models_=std::make_shared<int32_t>((int32_t)pJson["models"].asInt64());
        }
    }
    if(pJson.isMember("videos"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["videos"].isNull())
        {
            videos_=std::make_shared<int32_t>((int32_t)pJson["videos"].asInt64());
        }
    }
}

void Statistics::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            audios_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            documents_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ebooks_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            images_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            models_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            videos_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

void Statistics::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("audios"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["audios"].isNull())
        {
            audios_=std::make_shared<int32_t>((int32_t)pJson["audios"].asInt64());
        }
    }
    if(pJson.isMember("documents"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["documents"].isNull())
        {
            documents_=std::make_shared<int32_t>((int32_t)pJson["documents"].asInt64());
        }
    }
    if(pJson.isMember("ebooks"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["ebooks"].isNull())
        {
            ebooks_=std::make_shared<int32_t>((int32_t)pJson["ebooks"].asInt64());
        }
    }
    if(pJson.isMember("images"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["images"].isNull())
        {
            images_=std::make_shared<int32_t>((int32_t)pJson["images"].asInt64());
        }
    }
    if(pJson.isMember("models"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["models"].isNull())
        {
            models_=std::make_shared<int32_t>((int32_t)pJson["models"].asInt64());
        }
    }
    if(pJson.isMember("videos"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["videos"].isNull())
        {
            videos_=std::make_shared<int32_t>((int32_t)pJson["videos"].asInt64());
        }
    }
}

const int32_t &Statistics::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getId() const noexcept
{
    return id_;
}
void Statistics::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Statistics::PrimaryKeyType & Statistics::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &Statistics::getValueOfAudios() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(audios_)
        return *audios_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getAudios() const noexcept
{
    return audios_;
}
void Statistics::setAudios(const int32_t &pAudios) noexcept
{
    audios_ = std::make_shared<int32_t>(pAudios);
    dirtyFlag_[1] = true;
}

const int32_t &Statistics::getValueOfDocuments() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(documents_)
        return *documents_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getDocuments() const noexcept
{
    return documents_;
}
void Statistics::setDocuments(const int32_t &pDocuments) noexcept
{
    documents_ = std::make_shared<int32_t>(pDocuments);
    dirtyFlag_[2] = true;
}

const int32_t &Statistics::getValueOfEbooks() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(ebooks_)
        return *ebooks_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getEbooks() const noexcept
{
    return ebooks_;
}
void Statistics::setEbooks(const int32_t &pEbooks) noexcept
{
    ebooks_ = std::make_shared<int32_t>(pEbooks);
    dirtyFlag_[3] = true;
}

const int32_t &Statistics::getValueOfImages() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(images_)
        return *images_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getImages() const noexcept
{
    return images_;
}
void Statistics::setImages(const int32_t &pImages) noexcept
{
    images_ = std::make_shared<int32_t>(pImages);
    dirtyFlag_[4] = true;
}

const int32_t &Statistics::getValueOfModels() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(models_)
        return *models_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getModels() const noexcept
{
    return models_;
}
void Statistics::setModels(const int32_t &pModels) noexcept
{
    models_ = std::make_shared<int32_t>(pModels);
    dirtyFlag_[5] = true;
}

const int32_t &Statistics::getValueOfVideos() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(videos_)
        return *videos_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Statistics::getVideos() const noexcept
{
    return videos_;
}
void Statistics::setVideos(const int32_t &pVideos) noexcept
{
    videos_ = std::make_shared<int32_t>(pVideos);
    dirtyFlag_[6] = true;
}

void Statistics::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Statistics::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "audios",
        "documents",
        "ebooks",
        "images",
        "models",
        "videos"
    };
    return inCols;
}

void Statistics::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAudios())
        {
            binder << getValueOfAudios();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDocuments())
        {
            binder << getValueOfDocuments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEbooks())
        {
            binder << getValueOfEbooks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getImages())
        {
            binder << getValueOfImages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getModels())
        {
            binder << getValueOfModels();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVideos())
        {
            binder << getValueOfVideos();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Statistics::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Statistics::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAudios())
        {
            binder << getValueOfAudios();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDocuments())
        {
            binder << getValueOfDocuments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEbooks())
        {
            binder << getValueOfEbooks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getImages())
        {
            binder << getValueOfImages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getModels())
        {
            binder << getValueOfModels();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVideos())
        {
            binder << getValueOfVideos();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Statistics::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAudios())
    {
        ret["audios"]=getValueOfAudios();
    }
    else
    {
        ret["audios"]=Json::Value();
    }
    if(getDocuments())
    {
        ret["documents"]=getValueOfDocuments();
    }
    else
    {
        ret["documents"]=Json::Value();
    }
    if(getEbooks())
    {
        ret["ebooks"]=getValueOfEbooks();
    }
    else
    {
        ret["ebooks"]=Json::Value();
    }
    if(getImages())
    {
        ret["images"]=getValueOfImages();
    }
    else
    {
        ret["images"]=Json::Value();
    }
    if(getModels())
    {
        ret["models"]=getValueOfModels();
    }
    else
    {
        ret["models"]=Json::Value();
    }
    if(getVideos())
    {
        ret["videos"]=getValueOfVideos();
    }
    else
    {
        ret["videos"]=Json::Value();
    }
    return ret;
}

Json::Value Statistics::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAudios())
            {
                ret[pMasqueradingVector[1]]=getValueOfAudios();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDocuments())
            {
                ret[pMasqueradingVector[2]]=getValueOfDocuments();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getEbooks())
            {
                ret[pMasqueradingVector[3]]=getValueOfEbooks();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getImages())
            {
                ret[pMasqueradingVector[4]]=getValueOfImages();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getModels())
            {
                ret[pMasqueradingVector[5]]=getValueOfModels();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getVideos())
            {
                ret[pMasqueradingVector[6]]=getValueOfVideos();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAudios())
    {
        ret["audios"]=getValueOfAudios();
    }
    else
    {
        ret["audios"]=Json::Value();
    }
    if(getDocuments())
    {
        ret["documents"]=getValueOfDocuments();
    }
    else
    {
        ret["documents"]=Json::Value();
    }
    if(getEbooks())
    {
        ret["ebooks"]=getValueOfEbooks();
    }
    else
    {
        ret["ebooks"]=Json::Value();
    }
    if(getImages())
    {
        ret["images"]=getValueOfImages();
    }
    else
    {
        ret["images"]=Json::Value();
    }
    if(getModels())
    {
        ret["models"]=getValueOfModels();
    }
    else
    {
        ret["models"]=Json::Value();
    }
    if(getVideos())
    {
        ret["videos"]=getValueOfVideos();
    }
    else
    {
        ret["videos"]=Json::Value();
    }
    return ret;
}

bool Statistics::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("audios"))
    {
        if(!validJsonOfField(1, "audios", pJson["audios"], err, true))
            return false;
    }
    if(pJson.isMember("documents"))
    {
        if(!validJsonOfField(2, "documents", pJson["documents"], err, true))
            return false;
    }
    if(pJson.isMember("ebooks"))
    {
        if(!validJsonOfField(3, "ebooks", pJson["ebooks"], err, true))
            return false;
    }
    if(pJson.isMember("images"))
    {
        if(!validJsonOfField(4, "images", pJson["images"], err, true))
            return false;
    }
    if(pJson.isMember("models"))
    {
        if(!validJsonOfField(5, "models", pJson["models"], err, true))
            return false;
    }
    if(pJson.isMember("videos"))
    {
        if(!validJsonOfField(6, "videos", pJson["videos"], err, true))
            return false;
    }
    return true;
}
bool Statistics::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Statistics::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("audios"))
    {
        if(!validJsonOfField(1, "audios", pJson["audios"], err, false))
            return false;
    }
    if(pJson.isMember("documents"))
    {
        if(!validJsonOfField(2, "documents", pJson["documents"], err, false))
            return false;
    }
    if(pJson.isMember("ebooks"))
    {
        if(!validJsonOfField(3, "ebooks", pJson["ebooks"], err, false))
            return false;
    }
    if(pJson.isMember("images"))
    {
        if(!validJsonOfField(4, "images", pJson["images"], err, false))
            return false;
    }
    if(pJson.isMember("models"))
    {
        if(!validJsonOfField(5, "models", pJson["models"], err, false))
            return false;
    }
    if(pJson.isMember("videos"))
    {
        if(!validJsonOfField(6, "videos", pJson["videos"], err, false))
            return false;
    }
    return true;
}
bool Statistics::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Statistics::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
